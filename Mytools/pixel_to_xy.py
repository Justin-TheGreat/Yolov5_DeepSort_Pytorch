# -*- coding: utf-8 -*-
"""Pixel_to_XY.ipynb

Automatically generated by Colaboratory.

"""

def pixel_to_xy(cen_x,cen_y,img):
  horix_database = [1,2,3,4,5,6,7,8,9]   # units in meter. There are x-1 elements,(right now is ten zones).
  vertiy_database = [1,2,3,4,5,6,7,8,9]  # add this number to the coordinate. Note that every element is the sum of all previous elements
  
  horix_ratio = 1     # units of ratio is meter/pixel
  vertiy_ratio = 2
# calibrate horix_ratio

  if cen_x <= int(img.shape[1]) and cen_x > int(img.shape[1]*0.9):
    horix_ratio = 1
    add_x = 0
    zone_idx = 1
  elif cen_x <= int(img.shape[1]*0.9) and cen_x > int(img.shape[1]*0.8):
    horix_ratio = 1
    add_x =  horix_database[0]
    zone_idx = 2
  elif cen_x <= int(img.shape[1]*0.8) and cen_x > int(img.shape[1]*0.7):
    horix_ratio = 1
    add_x =  horix_database[1]
    zone_idx = 3
  elif cen_x <= int(img.shape[1]*0.7) and cen_x > int(img.shape[1]*0.6):
    horix_ratio = 1
    add_x =  horix_database[2]
    zone_idx = 4
  elif cen_x <= int(img.shape[1]*0.6) and cen_x > int(img.shape[1]*0.5):
    horix_ratio = 1
    add_x =  horix_database[3]
    zone_idx = 5
  elif cen_x <= int(img.shape[1]*0.5) and cen_x > int(img.shape[1]*0.4):
    horix_ratio = 1
    add_x =  horix_database[4]
    zone_idx = 6
  elif cen_x <= int(img.shape[1]*0.4) and cen_x > int(img.shape[1]*0.3):
    horix_ratio = 1
    add_x =  horix_database[5]
    zone_idx = 7
  elif cen_x <= int(img.shape[1]*0.3) and cen_x > int(img.shape[1]*0.2):
    horix_ratio = 1
    add_x =  horix_database[6]
    zone_idx = 8
  elif cen_x <= int(img.shape[1]*0.2) and cen_x > int(img.shape[1]*0.1):
    horix_ratio = 1
    add_x =  horix_database[7]
    zone_idx = 9
  elif cen_x <= int(img.shape[1]*0.1) and cen_x >= 0:
    horix_ratio = 1
    add_x =  horix_database[8]
    zone_idx = 10

#calibrating vertiy_ratio starts from here

  if cen_y <= int(img.shape[0]) and cen_y > int(img.shape[0]*0.9):
    add_y = 0
    vertiy_ratio = 1
    zone_idx = 1
  elif cen_y <= int(img.shape[0]*0.9) and cen_y > int(img.shape[0]*0.8):
    vertiy_ratio = 1
    zone_idx = 2
    add_y =  vertiy_database[0]
  elif cen_y <= int(img.shape[0]*0.8) and cen_y > int(img.shape[0]*0.7):
    vertiy_ratio = 1
    add_y =  vertiy_database[1]
    zone_idx = 3
  elif cen_y <= int(img.shape[0]*0.7) and cen_y > int(img.shape[0]*0.6):
    vertiy_ratio = 1
    add_y =  vertiy_database[2]
    zone_idx = 4
  elif cen_y <= int(img.shape[0]*0.6) and cen_y > int(img.shape[0]*0.5):
    vertiy_ratio = 1
    add_y =  vertiy_database[3]
    zone_idx = 5
  elif cen_y <= int(img.shape[0]*0.5) and cen_y > int(img.shape[0]*0.4):
    vertiy_ratio = 1
    add_y =  vertiy_database[4]
    zone_idx = 6
  elif cen_y <= int(img.shape[0]*0.4) and cen_y > int(img.shape[0]*0.3):
    vertiy_ratio = 1
    add_y =  vertiy_database[5]
    zone_idx = 7
  elif cen_y <= int(img.shape[0]*0.3) and cen_y > int(img.shape[0]*0.2):
    vertiy_ratio = 1
    add_y =  vertiy_database[6]
    zone_idx = 8
  elif cen_y <= int(img.shape[0]*0.2) and cen_y > int(img.shape[0]*0.1):
    vertiy_ratio = 1
    add_y =  vertiy_database[7]
    zone_idx = 9
  elif cen_y <= int(img.shape[0]*0.1) and cen_y >= 0:
    vertiy_ratio = 1
    add_y =  vertiy_database[8]
    zone_idx = 10

#start convert pixel to (x,y) on the imaginary coordinate

  y = (cen_y - ((11 - zone_idx)/10 * img.shape[0])) * vertiy_ratio + add_y
  y = y*(-1)
  x = (cen_x - ((11 - zone_idx)/10 * img.shape[1])) * horix_ratio + add_x # need to change, see where the camera is.
  target = [x,y]
  return target
